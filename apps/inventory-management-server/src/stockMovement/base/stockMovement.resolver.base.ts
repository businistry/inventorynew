/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { StockMovement } from "./StockMovement";
import { StockMovementCountArgs } from "./StockMovementCountArgs";
import { StockMovementFindManyArgs } from "./StockMovementFindManyArgs";
import { StockMovementFindUniqueArgs } from "./StockMovementFindUniqueArgs";
import { CreateStockMovementArgs } from "./CreateStockMovementArgs";
import { UpdateStockMovementArgs } from "./UpdateStockMovementArgs";
import { DeleteStockMovementArgs } from "./DeleteStockMovementArgs";
import { Item } from "../../item/base/Item";
import { StockMovementService } from "../stockMovement.service";
@graphql.Resolver(() => StockMovement)
export class StockMovementResolverBase {
  constructor(protected readonly service: StockMovementService) {}

  async _stockMovementsMeta(
    @graphql.Args() args: StockMovementCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [StockMovement])
  async stockMovements(
    @graphql.Args() args: StockMovementFindManyArgs
  ): Promise<StockMovement[]> {
    return this.service.stockMovements(args);
  }

  @graphql.Query(() => StockMovement, { nullable: true })
  async stockMovement(
    @graphql.Args() args: StockMovementFindUniqueArgs
  ): Promise<StockMovement | null> {
    const result = await this.service.stockMovement(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => StockMovement)
  async createStockMovement(
    @graphql.Args() args: CreateStockMovementArgs
  ): Promise<StockMovement> {
    return await this.service.createStockMovement({
      ...args,
      data: {
        ...args.data,

        item: args.data.item
          ? {
              connect: args.data.item,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => StockMovement)
  async updateStockMovement(
    @graphql.Args() args: UpdateStockMovementArgs
  ): Promise<StockMovement | null> {
    try {
      return await this.service.updateStockMovement({
        ...args,
        data: {
          ...args.data,

          item: args.data.item
            ? {
                connect: args.data.item,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => StockMovement)
  async deleteStockMovement(
    @graphql.Args() args: DeleteStockMovementArgs
  ): Promise<StockMovement | null> {
    try {
      return await this.service.deleteStockMovement(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Item, {
    nullable: true,
    name: "item",
  })
  async getItem(@graphql.Parent() parent: StockMovement): Promise<Item | null> {
    const result = await this.service.getItem(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
