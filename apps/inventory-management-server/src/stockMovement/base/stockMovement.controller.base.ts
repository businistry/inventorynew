/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { StockMovementService } from "../stockMovement.service";
import { StockMovementCreateInput } from "./StockMovementCreateInput";
import { StockMovement } from "./StockMovement";
import { StockMovementFindManyArgs } from "./StockMovementFindManyArgs";
import { StockMovementWhereUniqueInput } from "./StockMovementWhereUniqueInput";
import { StockMovementUpdateInput } from "./StockMovementUpdateInput";

export class StockMovementControllerBase {
  constructor(protected readonly service: StockMovementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: StockMovement })
  async createStockMovement(
    @common.Body() data: StockMovementCreateInput
  ): Promise<StockMovement> {
    return await this.service.createStockMovement({
      data: {
        ...data,

        item: data.item
          ? {
              connect: data.item,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        date: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        movementType: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [StockMovement] })
  @ApiNestedQuery(StockMovementFindManyArgs)
  async stockMovements(
    @common.Req() request: Request
  ): Promise<StockMovement[]> {
    const args = plainToClass(StockMovementFindManyArgs, request.query);
    return this.service.stockMovements({
      ...args,
      select: {
        createdAt: true,
        date: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        movementType: true,
        quantity: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: StockMovement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async stockMovement(
    @common.Param() params: StockMovementWhereUniqueInput
  ): Promise<StockMovement | null> {
    const result = await this.service.stockMovement({
      where: params,
      select: {
        createdAt: true,
        date: true,
        id: true,

        item: {
          select: {
            id: true,
          },
        },

        movementType: true,
        quantity: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: StockMovement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateStockMovement(
    @common.Param() params: StockMovementWhereUniqueInput,
    @common.Body() data: StockMovementUpdateInput
  ): Promise<StockMovement | null> {
    try {
      return await this.service.updateStockMovement({
        where: params,
        data: {
          ...data,

          item: data.item
            ? {
                connect: data.item,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          date: true,
          id: true,

          item: {
            select: {
              id: true,
            },
          },

          movementType: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: StockMovement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteStockMovement(
    @common.Param() params: StockMovementWhereUniqueInput
  ): Promise<StockMovement | null> {
    try {
      return await this.service.deleteStockMovement({
        where: params,
        select: {
          createdAt: true,
          date: true,
          id: true,

          item: {
            select: {
              id: true,
            },
          },

          movementType: true,
          quantity: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
