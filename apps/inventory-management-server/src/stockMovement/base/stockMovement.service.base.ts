/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  StockMovement as PrismaStockMovement,
  Item as PrismaItem,
} from "@prisma/client";

export class StockMovementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.StockMovementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.stockMovement.count(args);
  }

  async stockMovements<T extends Prisma.StockMovementFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockMovementFindManyArgs>
  ): Promise<PrismaStockMovement[]> {
    return this.prisma.stockMovement.findMany<Prisma.StockMovementFindManyArgs>(
      args
    );
  }
  async stockMovement<T extends Prisma.StockMovementFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockMovementFindUniqueArgs>
  ): Promise<PrismaStockMovement | null> {
    return this.prisma.stockMovement.findUnique(args);
  }
  async createStockMovement<T extends Prisma.StockMovementCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockMovementCreateArgs>
  ): Promise<PrismaStockMovement> {
    return this.prisma.stockMovement.create<T>(args);
  }
  async updateStockMovement<T extends Prisma.StockMovementUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockMovementUpdateArgs>
  ): Promise<PrismaStockMovement> {
    return this.prisma.stockMovement.update<T>(args);
  }
  async deleteStockMovement<T extends Prisma.StockMovementDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.StockMovementDeleteArgs>
  ): Promise<PrismaStockMovement> {
    return this.prisma.stockMovement.delete(args);
  }

  async getItem(parentId: string): Promise<PrismaItem | null> {
    return this.prisma.stockMovement
      .findUnique({
        where: { id: parentId },
      })
      .item();
  }
}
